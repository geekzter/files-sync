name: azcopy-ci

on:
  push:
    branches: [ main, improvements ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  schedule:
  - cron:  '0 3 * * *'
  workflow_dispatch:

env:
  AZCOPY_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_EXTENSION_USE_DYNAMIC_INSTALL: yes_without_prompt
  AZURE_DEFAULTS_LOCATION: westeurope

permissions:
  id-token: write
  contents: read

jobs:
  syncTest:
    name: Create storage, sync & destroy
    # defaults:
    #   run:
    #     working-directory: scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Use Azure CLI
      uses: azure/login@v1.4.1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Prepare environment variables
      run: | 
        Write-Output "FILES_SYNC_DEBUG=${{ secrets.ACTIONS_RUNNER_DEBUG }}" >> $env:GITHUB_ENV
        Write-Output "FILES_SYNC_STORAGE_ACCOUNT=filesyncci${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
        Write-Output "FILES_SYNC_STORAGE_ACCOUNT_CLONE=filesync2ci${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
        Write-Output "FILES_SYNC_RESOURCE_GROUP=file-sync-ci-rg${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
      shell: pwsh

    - name: List environment variables
      run: | 
        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZCOPY_*,FILES_SYNC_*,*TEMP*,*TMP* | Sort-Object -Property Name
        Get-ChildItem -Path Env: -Recurse -Include * | Sort-Object -Property Name
      shell: pwsh

    - name: Create Storage Account
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        ./scripts/create_storage_account.ps1 -Container artifacts `
                                             -Name $env:FILES_SYNC_STORAGE_ACCOUNT `
                                             -ResourceGroup $env:FILES_SYNC_RESOURCE_GROUP `
                                             -SubscriptionId ${{ secrets.ARM_SUBSCRIPTION_ID }}
      shell: pwsh

    - name: Prepare upload
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        # Create upload directory
        $uploadDirectory = (Join-Path $env:RUNNER_WORKSPACE "upload")
        New-Item $uploadDirectory -ItemType "directory" -Force | Write-Debug
        Get-ChildItem $env:GITHUB_WORKSPACE -Recurse | Copy-Item -Destination {Join-Path $uploadDirectory $_.FullName.Substring(($env:GITHUB_WORKSPACE).Length)}

        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          Write-Host "To be uploaded files:"
          Get-ChildItem $uploadDirectory -Recurse -Force | % {
            Write-Host $_.FullName
          }        
        }

        Write-Output "FILES_SYNC_UPLOAD_DIRECTORY=${uploadDirectory}" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Sync with AzCopy
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        # Wait for resource graph to populate
        $waitSeconds = 45
        Write-Host "Waiting $waitSeconds seconds for Azure resource graph to reflect..."
        Start-Sleep -Seconds $waitSeconds

        Get-Content $env:GITHUB_WORKSPACE/scripts/azcopy-settings.jsonc | ConvertFrom-Json | Set-Variable settings
        $settings.tenantId = $env:AZCOPY_TENANT_ID
        $settings.syncPairs[0].source = $env:FILES_SYNC_UPLOAD_DIRECTORY
        $settings.syncPairs[0].target = "https://${env:FILES_SYNC_STORAGE_ACCOUNT}.blob.core.windows.net/artifacts"

        $jobSettingsFile = (New-TemporaryFile).FullName
        $settings | ConvertTo-Json | Out-File $jobSettingsFile
        Get-Content $jobSettingsFile | Write-Debug

        ./scripts/sync_with_azcopy.ps1 -SettingsFile $jobSettingsFile
      shell: pwsh

    - name: Clone Storage Account
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        ./scripts/clone_storage_account.ps1 -SourceName $env:FILES_SYNC_STORAGE_ACCOUNT `
                                            -TargetName $env:FILES_SYNC_STORAGE_ACCOUNT_CLONE
      shell: pwsh

    - name: Download with AzCopy
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        $downloadDirectory = (Join-Path $env:RUNNER_WORKSPACE "download")
        New-Item $downloadDirectory -ItemType "directory" -Force | Write-Debug
        ./scripts/download_from_storage.ps1 -Source "https://${env:FILES_SYNC_STORAGE_ACCOUNT_CLONE}.blob.core.windows.net/artifacts" `
                                            -Destination $downloadDirectory
        Write-Output "FILES_SYNC_DOWNLOAD_DIRECTORY=${downloadDirectory}" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Compare upload & download
      run: | 
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        $uploadDirectory = $env:FILES_SYNC_UPLOAD_DIRECTORY
        $upload = (Get-ChildItem $uploadDirectory -Recurse -Force | Sort-Object -Property FullName | Select-Object -Property Name, Length)
        $downloadDirectory = $env:FILES_SYNC_DOWNLOAD_DIRECTORY
        $download = (Get-ChildItem $downloadDirectory -Recurse -Force | Sort-Object -Property FullName | Select-Object -Property Name, Length)

        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          Write-Host "Downloaded files:"
          Get-ChildItem $downloadDirectory -Recurse -Force | % {
            Write-Host $_.FullName
          }
          Write-Host " "
        }

        # https://adamtheautomator.com/powershell-compare-directories/
        $diff = (Compare-Object -ReferenceObject $upload.Name -DifferenceObject $download.Name -SyncWindow ($upload.length / 2))
        if ($diff -and $diff.Count -gt 0) {
          Write-Warning "Differences found between upload & download:"
          $diff | Format-Table
          throw "Test failed, download is different from upload"
        }

        $diff = (Compare-Object -ReferenceObject $upload -DifferenceObject $download -SyncWindow ($upload.length / 2))
        if ($diff -and $diff.Count -gt 0) {
          Write-Warning "Differences found between upload & download file sizes:"
          $diff | Format-Table
          throw "Test failed, download file size is different from upload"
        }

        if (-not (($upload.foreach{ Get-FileHash $_.FullName }).Hash -and ($download.foreach{ Get-FileHash $_.FullName }).Hash)) {
          Write-Warning "Differences found between uploaded & downloaded file contents"
          throw "Test failed, downloaded file contents is different from upload"
        }        
      shell: pwsh

    - name: Clean Up
      if: ${{ always() }}
      run: |
        if ($env:FILES_SYNC_DEBUG -ieq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }

        $ErrorActionPreference = "Stop"
        if (!$env:GITHUB_RUN_ID) {
          throw "GITHUB_RUN_ID not set, we can't identify resources to be cleaned up"
        }
        if (!$env:FILES_SYNC_RESOURCE_GROUP) {
          throw "FILES_SYNC_RESOURCE_GROUP not set, we can't identify resources to be cleaned up"
        }
        $ErrorActionPreference = "Continue"

        # Remove resource locks first
        az lock list -g $env:FILES_SYNC_RESOURCE_GROUP --query [].id -o tsv | Set-Variable resourceLockIds
        if ($resourceLockIds) {
          Write-Host "Removing resource locks $resourceLockIds..."
          az lock delete --ids $resourceLockIds
        }

        # Build JMESPath expression
        $tagQuery = "[?tags.application == 'files-sync' && tags.runid == '${env:GITHUB_RUN_ID}' && properties.provisioningState != 'Deleting'].id"
        Write-Host "Removing resource group identified by `"$tagQuery`"..."
        $resourceGroupIDs = $(az group list --query "$tagQuery" -o tsv)
        if ($resourceGroupIDs) {
          Write-Host "az resource delete --ids ${resourceGroupIDs}..."
          az resource delete --ids $resourceGroupIDs --verbose
        } else {
          Write-Host "Nothing to remove"
        }        
      shell: pwsh