name: ci

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, improvements ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  schedule:
  - cron:  '0 3 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZCOPY_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_DEFAULTS_LOCATION: westeurope

permissions:
  id-token: write
  contents: read

jobs:
  syncTest:
    name: Create storage, sync & destroy
    # defaults:
    #   run:
    #     working-directory: scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    # # ubuntu Az CLI installation 
    # - name: Install CLI-beta
    #   run: |
    #     cd ../..
    #     CWD="$(pwd)"
    #     python3 -m venv oidc-venv
    #     . oidc-venv/bin/activate
    #     echo "activated environment" 
    #     python3 -m pip install --upgrade pip
    #     echo "started installing cli beta" 
    #     pip install -q --extra-index-url https://azcliprod.blob.core.windows.net/beta/simple/ azure-cli
    #     echo "installed cli beta"    
    #     echo "$CWD/oidc-venv/bin" >> $GITHUB_PATH   
    - name: Use Azure CLI
      uses: azure/login@v1.4.1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Prepare environment variables
      run: | 
        Write-Output "FILES_SYNC_STORAGE_ACCOUNT=filesyncci${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
        Write-Output "FILES_SYNC_RESOURCE_GROUP=file-sync-ci-rg${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
      shell: pwsh

    - name: List environment variables
      run: | 
        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZCOPY_*,FILES_SYNC_* | Sort-Object -Property Name
      shell: pwsh

    - name: Logged in identity information
      run: | 
        Write-Host "az account"
        az account show -o json

        Write-Host "az ad signed-in-user"
        az ad signed-in-user show -o json
      shell: pwsh

    - name: Create Storage Account
      run: | 
        ./scripts/create_storage_account.ps1 -Container artifacts `
                                             -Name $env:FILES_SYNC_STORAGE_ACCOUNT `
                                             -ResourceGroup $env:FILES_SYNC_RESOURCE_GROUP `
                                             -SubscriptionId ${{ secrets.ARM_SUBSCRIPTION_ID }} `
                                             -Verbose
      shell: pwsh

    - name: Clean Up
      if: ${{ always() }}
      run: |
        $ErrorActionPreference = "Stop"
        if (!$env:GITHUB_RUN_ID) {
          throw "GITHUB_RUN_ID not set, we can't identify resources to be cleaned up"
        }
        if (!$env:FILES_SYNC_RESOURCE_GROUP) {
          throw "FILES_SYNC_RESOURCE_GROUP not set, we can't identify resources to be cleaned up"
        }
        $ErrorActionPreference = "Continue"

        # Remove resource locks first
        az lock list -g $env:FILES_SYNC_RESOURCE_GROUP --query [].id -o tsv | Set-Variable resourceLockIds
        if ($resourceLockIds) {
          Write-Host "Removing resource locks $resourceLockIds..."
          az lock delete --ids $resourceLockIds
        }

        Write-Host "Removing resource group '${env:FILES_SYNC_RESOURCE_GROUP}'..."
        az group delete -g $env:FILES_SYNC_RESOURCE_GROUP -y --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}
      shell: pwsh