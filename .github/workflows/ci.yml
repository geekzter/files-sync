on:
  push:
    branches: [ main, improvements ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  schedule:
  - cron:  '0 3 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      debug_preference:
        description: 'Set PowerShell DebugPreference'
        required: false
        type: boolean
        default: false

        env:
  AZCOPY_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AZURE_EXTENSION_USE_DYNAMIC_INSTALL: yes_without_prompt
  AZURE_DEFAULTS_LOCATION: westeurope

name: ci

permissions:
  id-token: write
  contents: read

jobs:
  syncTest:
    name: Create storage, sync & destroy
    # defaults:
    #   run:
    #     working-directory: scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Use Azure CLI
      uses: azure/login@v1.4.1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: Prepare environment variables
      run: | 
        Write-Output "FILES_SYNC_STORAGE_ACCOUNT=filesyncci${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
        Write-Output "FILES_SYNC_RESOURCE_GROUP=file-sync-ci-rg${env:GITHUB_RUN_ID}" >> $env:GITHUB_ENV
        if (!$TEMP) {
          Write-Output "TEMP=${env:RUNNER_TEMP}" >> $env:GITHUB_ENV
        }        
      shell: pwsh

    - name: List environment variables
      run: | 
        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZCOPY_*,FILES_SYNC_*,*TEMP*,*TMP* | Sort-Object -Property Name
      shell: pwsh

    - name: Create Storage Account
      run: | 
        Write-Information "before: information on"
        Write-Verbose "before: verbose on"
        Write-Information "before: debug on"
        if ("{{ github.event.inputs.debug_preference }}") {
          if (${{ github.event.inputs.debug_preference }}) {
            $InformationPreference = "Continue"
            $VerbosePreference = "Continue"
            $DebugPreference = "Continue"
          }
        }
        Write-Information "after: information on"
        Write-Verbose "after: verbose on"
        Write-Information "after: debug on"
        ./scripts/create_storage_account.ps1 -Container artifacts `
                                             -Name $env:FILES_SYNC_STORAGE_ACCOUNT `
                                             -ResourceGroup $env:FILES_SYNC_RESOURCE_GROUP `
                                             -SubscriptionId ${{ secrets.ARM_SUBSCRIPTION_ID }} `
                                             -Debug
      shell: pwsh

    - name: Sync with azcopy
      run: | 
        Write-Information "before: information on"
        Write-Verbose "before: verbose on"
        Write-Information "before: debug on"
        if ("{{ github.event.inputs.debug_preference }}") {
          if (${{ github.event.inputs.debug_preference }}) {
            $InformationPreference = "Continue"
            $VerbosePreference = "Continue"
            $DebugPreference = "Continue"
          }
        }
        Write-Information "after: information on"
        Write-Verbose "after: verbose on"
        Write-Information "after: debug on"

        # Wait for resource graph to populate
        $waitSeconds = 60
        Write-Host "Waiting $waitSeconds seconds for Azure resource graph to reflect..."
        Start-Sleep -Seconds $waitSeconds

        Get-Content ./scripts/azcopy-settings.jsonc | ConvertFrom-Json | Set-Variable settings
        $settings.tenantId = "${env:AZCOPY_TENANT_ID}"
        $settings.syncPairs[0].source = $(pwd)
        $settings.syncPairs[0].target = "https://${env:FILES_SYNC_STORAGE_ACCOUNT}.blob.core.windows.net/artifacts"

        $jobSettingsFile = (New-TemporaryFile).FullName
        $settings | ConvertTo-Json | Out-File $jobSettingsFile
        Get-Content $jobSettingsFile | Write-Debug

        # Set-PSDebug -Trace 2
        ./scripts/sync_with_azcopy.ps1 -SettingsFile $jobSettingsFile
        # Set-PSDebug -Trace 0

      shell: pwsh

    - name: Clean Up
      if: ${{ always() }}
      run: |
        $ErrorActionPreference = "Stop"
        if (!$env:GITHUB_RUN_ID) {
          throw "GITHUB_RUN_ID not set, we can't identify resources to be cleaned up"
        }
        if (!$env:FILES_SYNC_RESOURCE_GROUP) {
          throw "FILES_SYNC_RESOURCE_GROUP not set, we can't identify resources to be cleaned up"
        }
        $ErrorActionPreference = "Continue"

        # Remove resource locks first
        az lock list -g $env:FILES_SYNC_RESOURCE_GROUP --query [].id -o tsv | Set-Variable resourceLockIds
        if ($resourceLockIds) {
          Write-Host "Removing resource locks $resourceLockIds..."
          az lock delete --ids $resourceLockIds
        }

        # Build JMESPath expression
        $tagQuery = "[?tags.application == 'files-sync' && tags.runid == '${env:GITHUB_RUN_ID}' && properties.provisioningState != 'Deleting'].id"
        Write-Host "Removing resource group identified by `"$tagQuery`"..."
        $resourceGroupIDs = $(az group list --query "$tagQuery" -o tsv)
        if ($resourceGroupIDs) {
          Write-Host "az resource delete --ids ${resourceGroupIDs}..."
          az resource delete --ids $resourceGroupIDs --verbose
        } else {
          Write-Host "Nothing to remove"
        }        
      shell: pwsh